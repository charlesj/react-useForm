// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getFieldPath combined name with items 1`] = `
Array [
  "data.listField",
  "items",
  "1",
  "fields",
  "fieldName",
]
`;

exports[`getFieldPath single name with items 1`] = `
Array [
  "listField",
  "items",
  "1",
  "fields",
  "fieldName",
]
`;

exports[`insertField 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "newField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "one",
      },
      "current": Immutable.Map {
        "value": "one",
      },
    },
  },
}
`;

exports[`insertField removes fieldName from removedFields 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "newField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "one",
      },
      "current": Immutable.Map {
        "value": "one",
      },
    },
  },
  "removedFields": Immutable.List [],
}
`;

exports[`list in state addListItem 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "",
                "pristine": true,
                "touched": false,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "type": "text",
                "value": "",
                "optional": false,
                "label": "First",
                "field": Immutable.Map {
                  "label": "First",
                  "name": "data.listField.items.0.fields.fieldName",
                },
              },
              "current": Immutable.Map {
                "helperText": "",
                "error": false,
                "pristine": true,
                "touched": false,
                "value": "",
              },
            },
          },
        },
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`list in state removeListItem 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`list in state touched set on current field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "",
                "pristine": true,
                "touched": true,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`list in state updateValue for field updates value on current 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "new value",
                "pristine": false,
                "touched": false,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`nested fields updateValue for field updates value on current 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "parent.nested": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "new value",
        "pristine": false,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`pristine is false if value not equal to initial 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "new value",
        "pristine": false,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`pristine is true if value equal to initial 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "field-name": Immutable.Map {
    "current": Immutable.Map {
      "pristine": false,
    },
  },
}
`;

exports[`removeField 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "removedFields": Immutable.List [
    "field-name",
  ],
}
`;

exports[`touched set on current field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": true,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`updateValue for field updates value on current 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "new value",
        "pristine": false,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;

exports[`validationResult set on current field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": true,
        "helperText": "i am error",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
}
`;
